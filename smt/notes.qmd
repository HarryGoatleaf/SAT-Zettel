---
author: "Peter Reithofer"
title: "First Order Logic"
date: "2022-01-19"
format:
  html:
    toc: true
    toc-depth: 5
    number-sections: true
    self-contained: true
---

\newcommand{\R}{\mathbb{R}}
\newcommand{\phi}{\varphi}

## First Order Logic
Definition: <!-- TODO: defi -->

### Theory
Let $\Sigma$ be a signature. Then a theory $T$ is defined by a set of
$\Sigma$-sentences.
We will often define theories as the smallest set that is closed under
a inference from a sound inference system and includes a set of *axioms*

:::{.callout-important}
### Difference to MaLo definition

* Theories don't need to be closed unter inference
* Theories don't need to be satisfiable
:::

Let $\phi$ be a $\Sigma$-formula, then $\phi$ is:

* *T-satisfiable* iff. there exists a structure
  that satisfies $T$ and $\phi$.
* *T-valid* iff. all structures that satisfy T also satisfy $\phi$

### Fragments
Restrict the grammar of FO.

:::{#exm-fo-fragments}
\ 

* quantifier-free fragment
* conjunctive fragment
* 2-CNF (only clauses with two literals)
* equality logic (no functions and predicates)
:::

## Eager SMT solving
General Idea
: transform FO-formula to sat-equivalent propositional formula and apply with SAT-solving.

### Equality Logic with Uninterpreted Functions
Problem:
Given a quantifier free FO formula over some functional signature $\phi$ in NNF,
can we find a structure $\mathfrak{A}$ and values for the variables $\alpha$ such that
$$ \mathfrak{A}, \alpha \models \phi$$

<!-- TODO: sehr freie def. vllt bezug zum VL formalismus herstellen -->
<!-- TODO: evtl motivation -->

#### Ackermann's reduction
Transforms formula to an equisatisfiable formula without uninterpreted functions.

**Algorithm**:

* For each function $F$ in $\phi$:
  * Introduce new variable for every occurence of $F$
  * Let $\mathcal{T}$ be the function that replaces each occurrence of $F$ with corresponding variable
* $\phi_\text{flat} := \mathcal{T}(\phi)$
* $\phi_\text{cong} := \bigwedge_{1 \leq i < j \leq m}
  (\mathcal{T}(arg(F_i)) =
   \mathcal{T}(arg(F_j))) \rightarrow (f_i = f_j)$
   
**Result**:

* $\phi_{cong} \land \phi_{flat}$ is satisfiability equivalent to $\phi$
* $\phi_{cong} \leftarrow \phi_{flat}$ is UNSAT iff. $\phi$ is valid

#### Eager SMT for equalities

::: {#def-equality-graph}
##### Equality Graphs
Let $\phi$ be a quantifier-free FO formula (with equalities) in NNF.
Then it's polar E-Graph is $(V, E_=, E_\neq)$, where

* $V$ is the set of variables
* $E_= := \{ \{x,y\} \vert x=y \text{ is an equality in } \phi\}$
* $E_\neq := \{ \{x,y\} \vert \neg(x=y) \text{ is disequality in } \phi\}$

and it's non-polar E-Graph is $(V, E_= \cup E_\neq)$
:::

<!-- TODO: evtl include some intuition about equivalence class corresponds to connected components
::: {.callout-note collapse="true"}
###### Intuition

If we consider the subgraph induced by all edges that represent a true constraint,
two variables that are in the same connected component are all equal.
:::
-->

::: {#def-contradictory-cycle}
##### Contradictory Cycle
A cycle is

* *contradictory* iff. it contains exactly one edge from $E_\neq$
* *simple* iff. it does not visit nodes twice
* *chord-free* iff. we can't replace multiple consecutive edges by one edge
:::

:::{.callout-note}
The existence of a contradictory cycle does not imply that the formula is UNSAT!
The E-Graph is an *abstraction* of $\phi$ and ignores it's Boolean structure.
A contradictory cycle only means, that if we make all $=$ true we have to make
the $\neq$ constraint false.
:::


##### Preprocessing
We first simplify the formula.
We know that we can trivially satisfy all constraints that
do not lie on a contradictory cycle because the domain is significantly large.
Thus we replace these constraints with true and simplify the formula.

##### The Sparse Method based on polar E-Graphs

Idea
: Require that for ever circle in the E-Graph, transitivity is ensured.

**Algorithm**:

* Let $\phi_{sk}$ be $\phi$ where every constraint $(x=y)$ is replaced by a fresh 
  Boolean variable $z_{x,y}$ 
  (and thus constraints $(x \neq y) \equiv \neg (x=y)$ by $\neg z_{x,y}$).
* Construct polar E-Graph $G := (V, E_=, E_\neq)$
* Then for every simple contradictory cycle $c = (e_1, ..., e_k)$ where 
  $e_1,...,e_{k-1} \in E_=$ and $e_k \in E_\neq$ we define
  $$
  \phi_{trans}^{c} := \left(\bigvee_{1 \leq i \leq k-1} \neg z_{e_1} \right) \lor z_{e_k}
  $$
  which guarantees, that if all equalities are satisfied on a contradictory cycle
  then the disequality is not satisfied
  ($z_{e_k}$ appears negated in $\phi_{sk}$).
* $\phi^{pol}_{trans} := \bigwedge_{\text{contradictory cycle } c} \phi^c_{trans}$

**Result**:
Satisfiability equivalent formula of $\phi$ is $\phi_{sk} \land \phi^{pol}_{trans}$

:::{.callout-note collapse="true"}
###### What about other simple cycles?

If we have a cycle consisting of edges from $E_=$ and
we find a solution where exactly one constraint on the cycle
is false the solution would also violate our theory.

**Example**: \
$\phi := x_1 = x_2 \lor x_2 = x_3 \lor x_3 = x_1$ \
would result in: $\phi_{sk} = z_{x_1, x_2} \lor z_{x_2, x_3} \lor z_{x_3, x_1}$ \
and because we don't have any contradictory cycles $\phi^{pol}_{trans} = true$. \
Thus a possible solution would be $z_{x_1, x_2} = z_{x_2, x_3} = true; z_{x_3, x_1} = false$
which violates our theory because $=$ is transitive.

However we can simply make this constraint (in our example $x_{x_3, x_1}$) to true and because
we assume that $\phi$ is in NNF we will only make the formula
"more true" 
<!-- (**monotonicity** of NNF) -->
.
:::

:::{.callout-important}
There can potentially be an **exponential** number of simple contradictory cycles!
:::

##### Chordal Method based on non-polar E-Graphs
Idea
: Add edges until the graph is composed only of (polynomially many) triangles.
  Then it suffices to require transitivity of every triangle.

::: {#def-chordal name="Chordal Graph"}
A graph is chordal iff. every simple cycle over at least 4 different nodes is chordal.

.
:::

How to make a graph cordal
: For every simple chord-free cycle over more than 4 nodes.
  Take any nodes and connect it directly to all other nodes on cycle.

**Algorithm**:

* Let $\phi_{sk}$ be $\phi$ where every constraint $(x=y)$ is replaced by a fresh 
  Boolean variable $z_{x,y}$ 
  (and thus constraints $(x \neq y) \equiv \neg (x=y)$ by $\neg z_{x,y}$).
* Construct non-polar E-Graph $G := (V, E_=)$
* Then for every traingle $t = (e_1, e_2, e_3)$
  $$ \phi_{trans}^{c} := (e_1 \land e_2) \rightarrow e_3 \land $$
  $$                  (e_2 \land e_3) \rightarrow e_1 \land $$
  $$                  (e_1 \land e_3) \rightarrow e_2 $$
  which guarantees the transitivity in $t$.
* $\phi^{pol}_{trans} := \bigwedge_{\text{contradictory cycle } c} \phi^c_{trans}$

**Result**:
Satisfiability equivalent formula of $\phi$ is $\phi_{sk} \land \phi_{trans}$

### Bitvector Arithmetic

#### bit-blasting

* Build propositional flattening
* Add Boolean variable for each bit of each sub-expression
* Add constraints for each sub-expression

## Lazy SMT solving
General Idea: find solutions for *boolean skeleton* of formulas and use *theory solver* to check
satisfiability of conjunction of predicates.